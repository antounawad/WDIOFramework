using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using Eulg.Shared;
using Microsoft.Win32;
using NUnit.Framework;
using Update.Fix.Fixes;

namespace Update.FixTests
{
    [TestFixture]
    public class FixTests
    {
        private const string BRANDING_FILE_NAME = "Branding.xml";

        protected const string CLIENT = "EULG_client.exe";

        protected static readonly string BASEDIRECTORY = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..");

        private static Branding _branding;
        protected static Branding Branding
        {
            get
            {
                if (_branding == null)
                {
                    var brandingXmlFile = Path.Combine(BASEDIRECTORY, BRANDING_FILE_NAME);
                    if (!File.Exists(brandingXmlFile)) throw new Exception("Datei " + brandingXmlFile + " nicht gefunden.");

                    _branding = Branding.Read(brandingXmlFile);
                }

                return _branding;
            }
        }

        static string ProgramFilesx86
        {
            get
            {
                if(8 == IntPtr.Size
                   || (!String.IsNullOrEmpty(Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432"))))
                {
                    return Environment.GetEnvironmentVariable("ProgramFiles(x86)");
                }

                return Environment.GetEnvironmentVariable("ProgramFiles");
            }
        }

        private void SetupDesktopTestLinks()
        {
            var desktop = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            var commonDesktop = Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory);
            var taskBar = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar");

            LinksBase.SetLink(Path.Combine(desktop, "Eulg_D_1.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
            LinksBase.SetLink(Path.Combine(desktop, "Eulg_D_2.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));

            LinksBase.SetLink(Path.Combine(commonDesktop, "Eulg_CD_1.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
            LinksBase.SetLink(Path.Combine(commonDesktop, "Eulg_CD_2.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));

            LinksBase.SetLink(Path.Combine(taskBar, "Eulg_TB_1.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
            LinksBase.SetLink(Path.Combine(taskBar, "Eulg_TB_2.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
        }

        private void SetupStartMenuLinks(string path)
        {
            if(!Directory.Exists(path))
                Directory.CreateDirectory(path);

            LinksBase.SetLink(Path.Combine(path, "EULG Client.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
            LinksBase.SetLink(Path.Combine(path, "EULG Fernwartung.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
            LinksBase.SetLink(Path.Combine(path, "EULG Support.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
            LinksBase.SetLink(Path.Combine(path, "EULG Sync-Client.lnk"), Path.Combine(ProgramFilesx86, "EULG", CLIENT));
        }

        private void SetupStartMenuLinksMain()
        {
            var clientStartMenuMain = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonStartMenu), "EULG");

            SetupStartMenuLinks(clientStartMenuMain);
        }

        private void SetupStartMenuLinksPrograms()
        {
            var clientStartMenuPrograms = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.StartMenu), "EULG");

            SetupStartMenuLinks(clientStartMenuPrograms);
        }

        private void SetupRegistry(string company, string product)
        {
            using (var rootKey = Registry.CurrentUser.OpenSubKey("Software", RegistryKeyPermissionCheck.ReadWriteSubTree))
            {
                using (var currentKey = rootKey?.CreateSubKey(company, RegistryKeyPermissionCheck.ReadWriteSubTree))
                {
                    using (var productKey = currentKey?.CreateSubKey(product))
                    {
                        productKey?.SetValue("LastVnId", Guid.Parse("a73bff0f-80a3-e311-9bfa-bcee7b9f44e8"), RegistryValueKind.String);
                        productKey?.SetValue("LastVpId", Guid.Parse("915a7439-dc1d-bd83-3524-39d2f2418526"), RegistryValueKind.String);
                        productKey?.SetValue("LastConsultationId", Guid.Parse("dab4437b-e2b5-13ad-02dd-39d8f63a6288"), RegistryValueKind.String);
                        productKey?.SetValue("LastSuccessfulPush", 0x06e7fd1fc5a0d388, RegistryValueKind.QWord);

                        using (var accountFolderKey = productKey?.CreateSubKey("Account"))
                        {
                            using (var accountKey = accountFolderKey?.CreateSubKey("magilla.gorilla@eulgtestclient.com"))
                            {
                                accountKey?.SetValue("AgencyId", Guid.Parse("4dbebad8-a6a2-e311-ae9b-0050568500ef"), RegistryValueKind.String);
                                accountKey?.SetValue("AgencyName", "Peter Feld", RegistryValueKind.String);
                                accountKey?.SetValue("LoginInfo", new byte[] { 01, 0x00, 0x00, 0x00, 0xd0, 0x8c, 0x9d, 0xdf, 0x01, 0x15, 0xd1, 0x11, 0x8c, 0x7a, 0x00, 0xc0, 0x4f, 0xc2, 0x97, 0xeb, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x90, 0xcc, 0xc2, 0xe5, 0xa2, 0xd0, 0x4d, 0xbf, 0x61, 0xd1, 0x84, 0x88, 0x0b, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x66, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xe9, 0xbc, 0xd1, 0xa5, 0x5e, 0x6a, 0x70, 0xd3, 0x3d, 0x4d, 0x36, 0x08, 0x39, 0xbf, 0x31, 0xda, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xaa, 0xad, 0xf1, 0xf3, 0xfc, 0x03, 0x41, 0x34, 0xfd, 0x3c, 0x62, 0x8e, 0xf3, 0xdb, 0xb2, 0x6b, 0x30, 0x00, 0x00, 0x00, 0x19, 0xdf, 0xd1, 0x25, 0xe0, 0xdd, 0xb4, 0x46, 0xb3, 0xf9, 0x3a, 0x7b, 0xc3, 0x80, 0x2e, 0xf3, 0xd4, 0xfc, 0xcd, 0xd8, 0x96, 0x10, 0xd1, 0xca, 0xd5, 0x2c, 0x31, 0xc0, 0x5a, 0xff, 0x7d, 0x01, 0xe9, 0x11, 0xf8, 0xf1, 0x4a, 0x1c, 0xe8, 0xdd, 0x7d, 0x76, 0xc2, 0x2a, 0xb0, 0x62, 0x4c, 0x0f, 0x14, 0x00, 0x00, 0x00, 0x1d, 0xc8, 0x3c, 0x95, 0x05, 0x0d, 0x93, 0xce, 0xfd, 0xe0, 0x40, 0xb3, 0xef, 0xf2, 0x35, 0xc9, 0x69, 0x90, 0x15, 0xf5 }, RegistryValueKind.Binary);
                                accountKey?.SetValue("LoginPassword", new byte[] { 01, 0x00, 0x00, 0x00, 0xd0, 0x8c, 0x9d, 0xdf, 0x01, 0x15, 0xd1, 0x11, 0x8c, 0x7a, 0x00, 0xc0, 0x4f, 0xc2, 0x97, 0xeb, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x90, 0xcc, 0xc2, 0xe5, 0xa2, 0xd0, 0x4d, 0xbf, 0x61, 0xd1, 0x84, 0x88, 0x0b, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x66, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7c, 0xc9, 0xaa, 0x0c, 0xe1, 0xab, 0xf6, 0xdd, 0xdb, 0x9b, 0xb5, 0x53, 0xea, 0xc6, 0xf5, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x56, 0x3c, 0xd3, 0x37, 0xc1, 0xa2, 0xbe, 0x29, 0x35, 0xf1, 0x8d, 0x46, 0xab, 0x34, 0x82, 0x12, 0x08, 0x00, 0x00, 0x00, 0xc1, 0x0d, 0xff, 0xd5, 0x50, 0x2e, 0xad, 0x20, 0x14, 0x00, 0x00, 0x00, 0x11, 0xeb, 0xf9, 0x1b, 0xac, 0xbf, 0x71, 0x68, 0x30, 0x43, 0x0a, 0x2b, 0x71, 0xce, 0xa6, 0x6f, 0x62, 0xa0, 0xf1, 0x88 }, RegistryValueKind.Binary);

                                using (var primaryDbKey = accountKey?.CreateSubKey("08085e60-fea8-40f9-98b4-1b9b299063a8"))
                                {
                                    primaryDbKey?.SetValue("DbPassword", new byte[] { 01, 0x00, 0x00, 0x00, 0xd0, 0x8c, 0x9d, 0xdf, 0x01, 0x15, 0xd1, 0x11, 0x8c, 0x7a, 0x00, 0xc0, 0x4f, 0xc2, 0x97, 0xeb, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x90, 0xcc, 0xc2, 0xe5, 0xa2, 0xd0, 0x4d, 0xbf, 0x61, 0xd1, 0x84, 0x88, 0x0b, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x66, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0xe9, 0x5d, 0x9c, 0x6f, 0x30, 0x74, 0x29, 0xa2, 0xa4, 0x64, 0x7e, 0xda, 0x76, 0x7b, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x55, 0x70, 0x28, 0xbd, 0xa1, 0xdc, 0x39, 0xf0, 0xc2, 0x0a, 0x4f, 0x4a, 0x68, 0x55, 0xef, 0x57, 0x20, 0x00, 0x00, 0x00, 0xec, 0xb7, 0x53, 0x11, 0x8c, 0x7f, 0x3b, 0x89, 0x4e, 0xd1, 0x38, 0xff, 0xe5, 0xf8, 0xa6, 0x0b, 0x27, 0xbc, 0x57, 0x4a, 0xc4, 0x64, 0x8e, 0xf0, 0xfc, 0xdc, 0xfc, 0xd8, 0x78, 0x7f, 0xd5, 0xae, 0x14, 0x00, 0x00, 0x00, 0x4c, 0xc3, 0xfc, 0xbe, 0xdc, 0x8b, 0x51, 0x32, 0x37, 0x5f, 0xd9, 0xea, 0x57, 0x19, 0x43, 0x04, 0x76, 0x1d, 0xac, 0x4b }, RegistryValueKind.Binary);
                                    primaryDbKey?.SetValue("DbPasswordDebug", "iuibAhyDzftgztfsk1zZXu35lc8=", RegistryValueKind.String);
                                    primaryDbKey?.SetValue("Type", "Primary", RegistryValueKind.String);
                                }

                                using (var trainingDbKey = accountKey?.CreateSubKey("34263eec-e22e-4c1f-9380-ee296a5ce51f"))
                                {
                                    trainingDbKey?.SetValue("DbPassword", new byte[] { 0x01, 0x00, 0x00, 0x00, 0xd0, 0x8c, 0x9d, 0xdf, 0x01, 0x15, 0xd1, 0x11, 0x8c, 0x7a, 0x00, 0xc0, 0x4f, 0xc2, 0x97, 0xeb, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x90, 0xcc, 0xc2, 0xe5, 0xa2, 0xd0, 0x4d, 0xbf, 0x61, 0xd1, 0x84, 0x88, 0x0b, 0x28, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x66, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x06, 0xdf, 0xe3, 0x26, 0x3a, 0xb8, 0x65, 0xcd, 0x82, 0xc5, 0xb2, 0x85, 0xdf, 0x08, 0x2c, 0x47, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0e, 0x98, 0xbf, 0xcd, 0xf0, 0x72, 0x5e, 0xbf, 0x2f, 0xad, 0xad, 0x28, 0xe7, 0x8f, 0xd9, 0x01, 0x20, 0x00, 0x00, 0x00, 0x6c, 0x7c, 0x0c, 0xdb, 0x5a, 0xbd, 0x28, 0x9c, 0x0d, 0x37, 0x13, 0xd2, 0xbc, 0x1e, 0xf4, 0x14, 0x79, 0x5e, 0x3d, 0xcd, 0xd1, 0x7a, 0x6d, 0xf1, 0x35, 0x68, 0xa4, 0x70, 0x38, 0x12, 0x10, 0xc2, 0x14, 0x00, 0x00, 0x00, 0x3b, 0xa7, 0x49, 0x63, 0x4b, 0x69, 0x4d, 0x37, 0x00, 0xf3, 0x30, 0x61, 0xb9, 0x3f, 0x5a, 0x72, 0xf8, 0x67, 0xcb, 0x2e }, RegistryValueKind.Binary);
                                    trainingDbKey?.SetValue("DbPasswordDebug", "1jyHUqSEw+60rVQUCYyKu7r+WJo=", RegistryValueKind.String);
                                    trainingDbKey?.SetValue("Type", "Training", RegistryValueKind.String);
                                }
                            }
                        }
                    }
                }
            }
        }

        private void SetupRegistryEulg()
        {
            SetupRegistry("EULG Software GmbH", "EULG");
        }

        private void SetupRegistryKs()
        {
            SetupRegistry("KS Software GmbH", "EULG");
        }

        private static bool IsAdministrator()
        {
            return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
        }

        [SetUp]
        public void Setup()
        {
            Assert.True(IsAdministrator());
        }

        [Test]
        public void TestStartMenuMain()
        {
            SetupStartMenuLinksMain();

            Assert.False(StartMenu.Check());

            StartMenu.Fix();

            Assert.True(StartMenu.Check());
        }
    }
}
